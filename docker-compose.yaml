
services:
  web:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      POSTGRES_HOST_AUTH_METHOD: trust
      MONGO_HOST: mongo
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"  
      - "9001:9001"  
    env_file:
      - .env
    networks:
      - app-network
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: $MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD
    command: server /data --console-address ":9001"
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    env_file:
      - .env
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_INITDB_ROOT_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_USERNAME
    volumes:
      - mongo_data:/data/db

volumes:
  pgdata:
  mongo_data:
  minio_data:

networks:
  app-network:
    driver: bridge
