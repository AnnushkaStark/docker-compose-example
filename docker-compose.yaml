
services:
  web:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      MONGO_HOST: mongo
      MYSQL_HOST: mysql
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
    ports:
      - "3306:3306"
    volumes:
      - pgdata:/var/lib/mysql/data
    networks:
      - app-network

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"  
      - "9001:9001"  
    env_file:
      - .env
    networks:
      - app-network
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: $MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD
    command: server /data --console-address ":9001"
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    env_file:
      - .env
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGO_INITDB_ROOT_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_USERNAME
    volumes:
      - mongo_data:/data/db
  
  redis:
    image: redis
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  celery:
    build: .
    command: celery -A worker worker --loglevel=info
    environment:
      DB_SERVER: $DB_SERVER
      DB_DATABASE: $DB_DATABASE
      DB_USERNAME: $DB_USERNAME
      DB_PASSWORD: $DB_PASSWORD
      REDIS_URL: $REDIS_URL
      CELERY_BROKER_URL: $REDIS_URL
      CELERY_RESULT_BACKEND: $REDIS_URL
    depends_on:
      - redis
      - app
    networks:
      - app-network

  flower:
    build: .
    command: celery -A worker flower --port=5555
    environment:
      DB_SERVER: $DB_SERVER
      DB_DATABASE: $DB_DATABASE
      DB_USERNAME: $DB_USERNAME
      DB_PASSWORD: $DB_PASSWORD
      REDIS_URL: $REDIS_URL
      CELERY_BROKER_URL: $REDIS_URL
      CELERY_RESULT_BACKEND: $REDIS_URL
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
    networks:
      - app-network
  celery-beat:
    build: .
    command: celery -A worker beat --loglevel=info --pidfile=/tmp/celerybeat.pid -s /tmp/celerybeat-schedule
    environment:
      DB_SERVER: $DB_SERVER
      DB_DATABASE: $DB_DATABASE
      DB_USERNAME: $DB_USERNAME
      DB_PASSWORD: $DB_PASSWORD
      REDIS_URL: $REDIS_URL
      CELERY_BROKER_URL: $REDIS_URL
      CELERY_RESULT_BACKEND: $REDIS_URL
    depends_on:
      - redis
      - app


volumes:
  pgdata:
  mongo_data:
  minio_data:
  mysql_data:
  redis_data:

networks:
  app-network:
    driver: bridge
